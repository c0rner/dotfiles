#!/bin/sh

error() {
   echo "error: $*" >&2
}

is_same_file() {
   local source="$(readlink -f $1)"
   local target="$(readlink -f $2)"

   # Check if it is a relatve link
   [ -z "${source}" ] && source="$(readlink -f $(dirname $2)/$1)"

   # Return with an error if source or target is invalid
   [ -z "${source}" -o -z "${target}" ] && return 1

   [ "${source}" != "${target}" ] && return 1
   return 0
}

link_file() {
   [ -z "$3" ] && return 12
   local targetdir="$1"
   local sourcedir="$2"
   local filename="$3"
   local target=$1/$3
   local source=$2/$3

   if [ -L "${target}" ]; then
      if is_same_file "${source}" "${target}"; then
         # Target already linked, do nothing
         return
      fi
      if [ -r ${target} ]; then
         error "'${target}' already linked ('$(readlink ${target})'), skipping!"
         return
      fi
      # Remove broken link
      rm "${target}"
   elif [ -f "${target}" ]; then
      error "'${target}' exists and is a file, skipping!"
      return
   fi

   echo "  linking '${source}' -> '${targetdir}'"
   ln -s "${source}" "${targetdir}"
}

list_dir() {
   find "$1" -maxdepth 1 -type f -printf "%f\n"
}

setup_dotfiles() {
   echo "Setting up links in ~/"
   Files=$(list_dir ${Dotdir})
   for File in ${Files}; do
      [ "${File}" = "${Basename}" ] && continue
      link_file "${HOME}" "${Basedir}" "${File}"
   done
}

setup_subdir() {
   local subdir="${Dotdir}/$1"

   [ -d "${subdir}" ] || return 1

   echo "Setting up links in ~/${subdir}"
   Files=$(list_dir ${subdir})
   for File in ${Files}; do
      link_file "${HOME}/bin" "../${subdir}" "${File}"
   done
}

Basename=$(basename "$0")
Basedir=$(dirname "$0")
Dotdir="${Basedir}"

setup_dotfiles
setup_subdir bin
